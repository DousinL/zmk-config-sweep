// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT
//#define ZMK_MOUSE_DEFAULT_MOVE_VAL 2500  // 600
//#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10
//#include <dt-bindings/zmk/mouse.h>

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

//#include <dt-bindings/zmk/pointing.h>

#define WIN 0
#define NUM 1
#define SYM 2
#define TRI 3

//#define MOUSE 4

/ {
    //    chosen { zmk,charmap = &charmap_us; };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        //        mmv {
        //            acceleration-exponent = <1>;      // 1
        //            time-to-max-speed-ms = <300>;    // 40
        //            delay-ms = <0>;                   // 0
        //        };
        //       msc {
        //            acceleration-exponent = <0>;      // 0
        //            time-to-max-speed-ms = <40>;      // 500
        //            delay-ms = <0>;                   // 10
        //        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        windows_layer {
            bindings = <
&kp Q           &kp W       &kp E               &kp R             &kp T             &kp Y      &kp U              &kp I                &kp O            &kp P
&ht LEFT_WIN A  &ht LALT S  &ht LEFT_CONTROL D  &ht LEFT_SHIFT F  &kp G             &kp H      &ht RIGHT_SHIFT J  &ht RIGHT_CONTROL K  &ht RIGHT_ALT L  &kp BSPC
&kp Z           &kp X       &kp C               &kp V             &kp B             &kp N      &kp M              &kp COMMA            &kp DOT          &kp ENTER
                                                &lt 1 ESC         &ht LSHIFT TAB    &kp SPACE  &lt 2 TAB
            >;
        };

        NUM {
            bindings = <
&kp N1   &kp N2    &kp N3   &kp N4          &kp N5         &kp N6    &kp N7    &kp N8     &kp N9     &kp N0
&kp ESC  &kp CAPS  &kp DEL  &kp LEFT_SHIFT  &kp INS        &kp LEFT  &kp DOWN  &kp UP     &kp RIGHT  &trans
&trans   &trans    &trans   &trans          &trans         &kp HOME  &kp END   &kp PG_UP  &kp PG_DN  &trans
                            &trans          &bootloader    &kp ESC   &trans
            >;
        };

        SYM {
            bindings = <
&kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET    &kp AMPS   &kp ASTRK  &kp GRAVE  &kp TILDE
&kp SEMI  &kp LPAR  &kp LBKT  &kp LBRC  &kp BSLH     &kp MINUS    &kp EQUAL  &kp PIPE   &kp COLON  &kp DQT
&kp SQT   &kp RPAR  &kp RBKT  &kp RBRC  &kp FSLH     &kp UNDER    &kp MINUS  &kp LT     &kp GT     &kp QMARK
                              &trans    &trans       &bootloader  &trans
            >;
        };

        tri_layer {
            bindings = <
&kp F1  &kp F2   &kp F3   &kp F4   &bt BT_SEL 0    &bt BT_SEL 2  &out OUT_TOG   &kp C_SLEEP     &kp C_MUTE    &kp C_PREV
&kp F5  &kp F6   &kp F7   &kp F8   &bt BT_SEL 1    &bt BT_SEL 3  &kp C_BRI_UP   &studio_unlock  &kp C_VOL_UP  &kp C_PP
&kp F9  &kp F10  &kp F11  &kp F12  &bt BT_CLR      &bt BT_SEL 4  &kp C_BRI_DEC  &kp K_SLEEP     &kp C_VOL_DN  &kp C_NEXT
                          &trans   &trans          &trans        &trans
            >;
        };

        //        mouse {
        //            bindings = <
        //&trans  &mkp MB4  &mkp MCLK  &mkp MB5   &trans        &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans
        //&trans  &trans    &trans     &trans     &trans        &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
        //&trans  &trans    &trans     &trans     &trans        &trans          &mkp MB4        &mkp MCLK     &mkp MB5         &trans
        //                             &kp SPACE  &kp LSHIFT    &mkp LCLK       &mkp RCLK
        //            >;
        //        };
    };
};
